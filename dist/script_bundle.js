/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is not neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./script.js":
/*!*******************!*\
  !*** ./script.js ***!
  \*******************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _translatedNames__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./translatedNames */ \"./translatedNames.js\");\n\nconst urlToPictures = `https://api.unsplash.com/photos/random?query=morning&client_id=${\"e2077ad31a806c894c460aec8f81bc2af4d09c4f8104ae3177bb809faf0eac17\"}`;\nconst celsiusBadge = 'C';\nconst farenheitBadge = 'F';\nconst {\n  body\n} = document;\nconst refreshButton = document.querySelector('.control__button--refresh');\nconst controlButtonsTemperature = document.querySelectorAll('.control__button--temperature');\nconst celsiusButton = document.querySelector('.control__button--celsius');\nconst farenheitButton = document.querySelector('.control__button--farenheit');\nconst latitude = document.querySelector('.location__coordinates--latitude');\nconst longitude = document.querySelector('.location__coordinates--longitude');\nconst temperatureNow = document.querySelector('.weather__temperature');\nconst forecastTemperature = document.querySelectorAll('.weather__forecast-temperature');\nconst forecastNamesOfDays = document.querySelectorAll('.weather__day');\nconst weatherDescriptions = document.querySelectorAll('.weather__text');\nconst weatherNowImage = document.querySelector('.weather__image');\nconst weatherForecastImages = document.querySelectorAll('.weather__forecast-image');\nconst dateString = document.querySelector('.weather__date');\nconst searchField = document.querySelector('.search__input');\nconst searchButton = document.querySelector('.search__button');\nconst cityAndCountry = document.querySelector('.weather__city');\nconst languageButtons = document.querySelector('.control__button--languages');\nconst activeLanguageButton = document.querySelector('.control__button--active-language');\nconst notActiveLanguageButtons = document.querySelectorAll('.control__button--not-active-language');\nconst languages = {\n  en: 'EN',\n  ru: 'RU'\n};\nlet language = localStorage.getItem('language') || languages.en;\nlet timeInterval;\nlet localTimeShift;\nlet startDate = new Date().toDateString();\nlet day = new Date().getDay();\nlet date = new Date().getDate();\nlet month = new Date().getMonth();\n\nconst getServicesData = async () => {\n  let weatherData;\n  let forecastData;\n  let countryData;\n\n  try {\n    const ipResponse = await fetch(`https://ipinfo.io/json?token=${\"eb5b90bb77d46a\"}`);\n    const ipData = await ipResponse.json();\n    const cityName = searchField.value.length ? searchField.value : ipData.city;\n    const weatherResponse = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${cityName}&lang=${language}&appid=${\"489c6e3b9c228bd88ea6333b1a07dfef\"}`);\n    weatherData = await weatherResponse.json();\n\n    if (weatherData.cod === '404') {\n      throw weatherData.message;\n    }\n\n    const forecastResponse = await fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${weatherData.coord.lat}&lon=${weatherData.coord.lon}&exclude={part}&appid=${\"489c6e3b9c228bd88ea6333b1a07dfef\"}`);\n    forecastData = await forecastResponse.json();\n    const countryResponse = await fetch(`https://htmlweb.ru/geo/api.php?country=${weatherData.sys.country}&info&json&api_key=${\"5ac6345ea632dcf4b4f242a291d9194a\"}`);\n    countryData = await countryResponse.json();\n  } catch (e) {\n    alert(e);\n    searchField.value = '';\n  }\n\n  return {\n    weatherData,\n    forecastData,\n    countryData\n  };\n};\n\nif (localStorage.getItem('temperature') === farenheitBadge) {\n  farenheitButton.classList.add('control__button--active');\n} else {\n  celsiusButton.classList.add('control__button--active');\n}\n\nconst translateSearchArea = () => {\n  const lang = language.toLowerCase();\n  searchField.placeholder = _translatedNames__WEBPACK_IMPORTED_MODULE_0__.searchAreaNames.placeHolder[lang];\n  searchButton.textContent = _translatedNames__WEBPACK_IMPORTED_MODULE_0__.searchAreaNames.search[lang];\n};\n\nconst changeLanguage = () => {\n  activeLanguageButton.textContent = language;\n  const restLanguages = Object.values(languages).filter(elem => elem !== language);\n\n  for (let i = 0; i < notActiveLanguageButtons.length; i += 1) {\n    notActiveLanguageButtons[i].textContent = restLanguages[i];\n  }\n\n  translateSearchArea();\n};\n\nchangeLanguage();\nconst MILLISECONDS_IN_SECOND = 1000;\n\nconst kelvinToCelsius = kelvin => {\n  const temp = Math.trunc(kelvin - 273.15);\n  return Math.abs(temp) ? `${temp}&deg;C` : '0&deg;C';\n};\n\nconst kelvinToFahrenheit = kelvin => {\n  const temp = Math.trunc((kelvin - 273.15) * 9 / 5 + 32);\n  return Math.abs(temp) ? `${temp}&deg;F` : '0&deg;F';\n};\n\nconst getDayAndMonthNames = () => {\n  const lang = language.toLowerCase();\n  return [_translatedNames__WEBPACK_IMPORTED_MODULE_0__.namesOfDays[day][lang], _translatedNames__WEBPACK_IMPORTED_MODULE_0__.namesOfMonths[month][lang]];\n};\n\nconst getDateString = timeShift => {\n  const nowDate = new Date();\n  const millisecondsUTC = nowDate.getTime() - localTimeShift;\n  const newCountryMilliseconds = new Date(millisecondsUTC + timeShift * MILLISECONDS_IN_SECOND);\n  const time = newCountryMilliseconds.toLocaleTimeString();\n  const [nameOfDay, nameOfMonth] = getDayAndMonthNames();\n  const [, shortDaysName] = nameOfDay;\n\n  if (startDate !== newCountryMilliseconds.toDateString()) {\n    startDate = newCountryMilliseconds.toDateString();\n    day = newCountryMilliseconds.getDay();\n    date = newCountryMilliseconds.getDate();\n    month = newCountryMilliseconds.getMonth();\n  }\n\n  return `${shortDaysName} ${date} ${nameOfMonth} ${time}`;\n};\n\nconst getLinkToImage = async () => {\n  const response = await fetch(urlToPictures);\n  const data = await response.json();\n  return data.urls.regular;\n};\n\nconst getCityName = ({\n  name\n}, {\n  country\n}) => {\n  if (country) {\n    const countryName = language === languages.ru ? country.name : country.english;\n    return `${name}, ${countryName}`;\n  }\n\n  return name;\n};\n\nconst printNowWeather = (tempFunc, weatherObject) => {\n  const lang = language.toLowerCase();\n  const feelsStr = _translatedNames__WEBPACK_IMPORTED_MODULE_0__.weatherDescription.feelsStr[lang];\n  const windStr = _translatedNames__WEBPACK_IMPORTED_MODULE_0__.weatherDescription.windStr[lang];\n  const windSpeedStr = _translatedNames__WEBPACK_IMPORTED_MODULE_0__.weatherDescription.windSpeedStr[lang];\n  const humidityStr = _translatedNames__WEBPACK_IMPORTED_MODULE_0__.weatherDescription.humidityStr[lang];\n  const [weatherType, weatherFeels, weatherWind, weatherHumidity] = weatherDescriptions;\n  weatherType.textContent = weatherObject.weather[0].description.toUpperCase();\n  weatherFeels.innerHTML = `${feelsStr}: ${tempFunc(weatherObject.main.feels_like)}`;\n  weatherWind.textContent = `${windStr}: ${weatherObject.wind.speed} ${windSpeedStr}`;\n  weatherHumidity.textContent = `${humidityStr}: ${weatherObject.main.humidity} %`;\n  temperatureNow.innerHTML = `${tempFunc(weatherObject.main.temp)}`;\n  weatherNowImage.setAttribute('src', `http://openweathermap.org/img/wn/${weatherObject.weather[0].icon}@2x.png`);\n};\n\nconst printForecast = (temperatureFunc, forecastObject) => {\n  const days = forecastObject.daily;\n  const lang = language.toLowerCase();\n\n  for (let i = 0; i < forecastTemperature.length; i += 1) {\n    const dayOfWeek = new Date(days[i + 1].dt * MILLISECONDS_IN_SECOND).getDay();\n    const daysName = _translatedNames__WEBPACK_IMPORTED_MODULE_0__.namesOfDays[dayOfWeek][lang];\n    [forecastNamesOfDays[i].textContent] = daysName;\n    forecastTemperature[i].innerHTML = `${temperatureFunc(forecastObject.daily[i + 1].temp.day)}`;\n    weatherForecastImages[i].setAttribute('src', `http://openweathermap.org/img/wn/${forecastObject.daily[i + 1].weather[0].icon}@2x.png`);\n  }\n};\n\nconst chooseTemp = (temperature, weatherAndForecastData) => {\n  const {\n    weatherData,\n    forecastData\n  } = weatherAndForecastData;\n\n  if (temperature.textContent[0] === celsiusBadge) {\n    printNowWeather(kelvinToCelsius, weatherData);\n    printForecast(kelvinToCelsius, forecastData);\n  } else {\n    printNowWeather(kelvinToFahrenheit, weatherData);\n    printForecast(kelvinToFahrenheit, forecastData);\n  }\n};\n\nconst printWeatherAndForecast = (temperature, weatherData) => {\n  chooseTemp(temperature, weatherData);\n};\n\nconst printCoordinate = weatherObject => {\n  const {\n    lat: firstCoordinate,\n    lon: secondCoordinate\n  } = weatherObject.coord;\n  const firstCoordinateDegree = Number(firstCoordinate).toFixed();\n  const firstCoordinateMinutes = String(firstCoordinate).split('.')[1].slice(0, 2);\n  const secondCoordinateDegree = Number(secondCoordinate).toFixed();\n  const secondCoordinateMinutes = String(secondCoordinate).split('.')[1].slice(0, 2);\n  const lang = language.toLowerCase();\n  latitude.innerHTML = `${_translatedNames__WEBPACK_IMPORTED_MODULE_0__.coordinateNames.latitude[lang]}: ${secondCoordinateDegree}&deg;${secondCoordinateMinutes}'`;\n  longitude.innerHTML = `${_translatedNames__WEBPACK_IMPORTED_MODULE_0__.coordinateNames.longitude[lang]}: ${firstCoordinateDegree}&deg;${firstCoordinateMinutes}'`;\n};\n\nconst printCity = (weatherObject, countryObject) => {\n  cityAndCountry.textContent = getCityName(weatherObject, countryObject);\n};\n\nconst printMap = weatherObject => {\n  const {\n    lat: firstCoordinate,\n    lon: secondCoordinate\n  } = weatherObject.coord;\n  mapboxgl.accessToken = 'pk.eyJ1IjoiZWJjZXMiLCJhIjoiY2tpOG1qdWcyMDczejJzbGJ3d2R5NHA3eCJ9.R9QjuutWo1QLod5AChOpdw';\n  const map = new mapboxgl.Map({\n    container: 'map',\n    style: 'mapbox://styles/mapbox/streets-v11',\n    center: [secondCoordinate, firstCoordinate],\n    zoom: 8\n  });\n};\n\nconst printNewBackground = async () => {\n  const backgroundLink = await getLinkToImage();\n  body.style.backgroundImage = `url(${backgroundLink})`;\n};\n\nconst removeLanguageButtons = () => {\n  notActiveLanguageButtons.forEach(button => {\n    button.remove();\n    setTimeout(() => {\n      languageButtons.append(button);\n    }, 0);\n  });\n};\n\nconst printInformation = async () => {\n  const {\n    weatherData,\n    forecastData,\n    countryData\n  } = await getServicesData();\n  const weatherAndForecastData = {\n    weatherData,\n    forecastData\n  };\n  const activeTemperatureButton = document.querySelector('.control__button--active');\n\n  if (!localTimeShift) {\n    localTimeShift = weatherData.timezone * MILLISECONDS_IN_SECOND;\n  }\n\n  printWeatherAndForecast(activeTemperatureButton, weatherAndForecastData);\n  printCoordinate(weatherData);\n  printCity(weatherData, countryData);\n  clearInterval(timeInterval);\n  timeInterval = setInterval(() => {\n    dateString.textContent = getDateString(weatherData.timezone);\n  }, 1000);\n  printMap(weatherData);\n  printNewBackground();\n};\n\nprintInformation();\nrefreshButton.addEventListener('click', printNewBackground);\n\nconst changeTemperature = async e => {\n  const {\n    weatherData,\n    forecastData\n  } = await getServicesData();\n  const weatherAndForecastData = {\n    weatherData,\n    forecastData\n  };\n  controlButtonsTemperature.forEach(button => button.classList.remove('control__button--active'));\n  e.target.classList.add('control__button--active');\n  localStorage.setItem('temperature', e.target.textContent[0]);\n  const activeTemperatureButton = document.querySelector('.control__button--active');\n  printWeatherAndForecast(activeTemperatureButton, weatherAndForecastData);\n};\n\nfarenheitButton.addEventListener('click', e => changeTemperature(e));\ncelsiusButton.addEventListener('click', e => changeTemperature(e));\nnotActiveLanguageButtons.forEach(elem => {\n  elem.addEventListener('click', async () => {\n    const activeTemperatureButton = document.querySelector('.control__button--active');\n    language = elem.textContent;\n    const {\n      weatherData,\n      forecastData,\n      countryData\n    } = await getServicesData();\n    const weatherAndForecastData = {\n      weatherData,\n      forecastData\n    };\n    printWeatherAndForecast(activeTemperatureButton, weatherAndForecastData);\n    printCoordinate(weatherData);\n    printCity(weatherData, countryData);\n    clearInterval(timeInterval);\n    timeInterval = setInterval(() => {\n      dateString.textContent = getDateString(weatherData.timezone);\n    }, 1000);\n    changeLanguage();\n    localStorage.setItem('language', language);\n    removeLanguageButtons();\n  });\n});\nsearchButton.addEventListener('click', () => {\n  printInformation();\n});\nwindow.addEventListener('keypress', e => {\n  if (e.key === 'Enter') {\n    printInformation();\n  }\n});\n\n//# sourceURL=webpack://fancy-weather/./script.js?");

/***/ }),

/***/ "./translatedNames.js":
/*!****************************!*\
  !*** ./translatedNames.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"namesOfDays\": () => /* binding */ namesOfDays,\n/* harmony export */   \"namesOfMonths\": () => /* binding */ namesOfMonths,\n/* harmony export */   \"coordinateNames\": () => /* binding */ coordinateNames,\n/* harmony export */   \"weatherDescription\": () => /* binding */ weatherDescription,\n/* harmony export */   \"searchAreaNames\": () => /* binding */ searchAreaNames\n/* harmony export */ });\nconst namesOfDays = {\n  0: {\n    ru: ['Воскресенье', 'Вс'],\n    en: ['Sunday', 'Sun']\n  },\n  1: {\n    ru: ['Понедельник', 'Пн'],\n    en: ['Monday', 'Mon']\n  },\n  2: {\n    ru: ['Вторник', 'Вт'],\n    en: ['Tuesday', 'Tue']\n  },\n  3: {\n    ru: ['Среда', 'Ср'],\n    en: ['Wednesday', 'Wed']\n  },\n  4: {\n    ru: ['Четверг', 'Чт'],\n    en: ['Thursday', 'Thu']\n  },\n  5: {\n    ru: ['Пятница', 'Пт'],\n    en: ['Friday', 'Fri']\n  },\n  6: {\n    ru: ['Суббота', 'Сб'],\n    en: ['Saturday', 'Sat']\n  }\n};\nconst namesOfMonths = {\n  0: {\n    ru: 'Январь',\n    en: 'January'\n  },\n  1: {\n    ru: 'Февраль',\n    en: 'February'\n  },\n  2: {\n    ru: 'Март',\n    en: 'March'\n  },\n  3: {\n    ru: 'Апрель',\n    en: 'April'\n  },\n  4: {\n    ru: 'Май',\n    en: 'May'\n  },\n  5: {\n    ru: 'Июнь',\n    en: 'June'\n  },\n  6: {\n    ru: 'Июль',\n    en: 'July'\n  },\n  7: {\n    ru: 'Август',\n    en: 'August'\n  },\n  8: {\n    ru: 'Сентябрь',\n    en: 'September'\n  },\n  9: {\n    ru: 'Октябрь',\n    en: 'October'\n  },\n  10: {\n    ru: 'Ноябрь',\n    en: 'November'\n  },\n  11: {\n    ru: 'Декабрь',\n    en: 'December'\n  }\n};\nconst coordinateNames = {\n  latitude: {\n    ru: 'Широта',\n    en: 'Latitude'\n  },\n  longitude: {\n    ru: 'Долгота',\n    en: 'Longitude'\n  }\n};\nconst weatherDescription = {\n  feelsStr: {\n    ru: 'ощущается',\n    en: 'feels like'\n  },\n  windStr: {\n    ru: 'ветер',\n    en: 'wind'\n  },\n  windSpeedStr: {\n    ru: 'м/с',\n    en: 'm/s'\n  },\n  humidityStr: {\n    ru: 'влажность',\n    en: 'humidity'\n  }\n};\nconst searchAreaNames = {\n  search: {\n    ru: 'Поиск',\n    en: 'Search'\n  },\n  placeHolder: {\n    ru: 'Введите город',\n    en: 'Search city'\n  }\n};\n\n//# sourceURL=webpack://fancy-weather/./translatedNames.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	// startup
/******/ 	// Load entry module
/******/ 	__webpack_require__("./script.js");
/******/ 	// This entry module used 'exports' so it can't be inlined
/******/ })()
;